#include <iostream>
using namespace std;
struct node {
  int data;
  struct node *next;
};
struct node* reverse(struct node* head) {
    struct node* prev = NULL;
    struct node* curr = head;

    while (curr != NULL) {
        struct node* next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    } 

    return prev;
}
void createList(struct node **head, int data) {
  struct node *newNode = (struct node *)malloc(sizeof(struct node));
  newNode->data = data;
  newNode->next = NULL;

  if (*head == NULL) {
    *head = newNode;
  } else {
    struct node *temp = *head;
    while (temp->next != NULL) {
      temp = temp->next;
    }
    temp->next = newNode;
  }
}
void displayList(struct node *head) {
  struct node *temp = head;
  while (temp != NULL) {
    printf("%d ", temp->data);
    temp = temp->next;
  }
  printf("\n");
}
struct node* merge(struct node*head1, struct node* head2)
{
struct node* ptr1 = head1;
  struct node* ptr2 = head2;
  struct node* temp1, * temp2;

  while (ptr1 && ptr2) {
    temp1 = ptr1->next;
    temp2 = ptr2->next;

    ptr1->next = ptr2;
    ptr2->next = temp1;

    ptr1 = temp1;
    ptr2 = temp2;
  }

  return head1;
}

int main() {
  struct node *head1 = NULL;

  createList(&head1, 1);
  createList(&head1, 2);
  createList(&head1, 3);
  createList(&head1, 4);
  createList(&head1, 5);
  createList(&head1, 6);
  createList(&head1, 7);
  createList(&head1, 8);
  createList(&head1, 9);
  createList(&head1, 10);
  int size=0;
  struct node *temp = head1;
  while (temp != NULL) {
    temp = temp->next;
    size++;
  }
  temp=head1;
  for(int i=0;i<((size/2)-1);i++)
  {
    temp=temp->next;
  }
  struct node* head2=reverse(temp);

 struct node* head3=head1;
 head3=merge(head1, head2);
 displayList(head3);
  return 0;
}
